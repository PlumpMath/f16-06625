#+BEGIN_SRC python :results output org drawer
from __future__ import division
import numpy as np
import matplotlib.pyplot as plt
import pycse.orgmode as org
from scipy.optimize import fsolve


R = 8.314e-3  # kJ/mol/K
T = 573.15 # in K
species = ['NH3', 'N2', 'H2']
Hf298 = [-45.90,  # NH3
            0.0,  # N2
            0.0]  # H2

Ca0 = 0.1 # M
Cb0 = 0
Cc0 = 0
xispan = np.linspace(-0.5, 0.5, 1000)
Kc = 1/9.6
# plotting f vs a range of xi_eq and seeing where it goes to 0
nu = np.array([-2, 1, 3])
C0 = np.array([Ca0, Cb0, Cc0]) # initial concentrations
f = np.zeros(len(xispan))
for i in range(len(xispan)):
    C = C0 + nu * xispan[i]
    f[i] = Kc - np.prod(C**nu)


xispanr = np.linspace(0, 0.1)
f1 = np.zeros(len(xispanr))
for i in range(len(xispanr)):
    C1 = C0 + nu * xispanr[i]
    f1[i] = Kc - np.prod(C1**nu)

plt.figure(figsize=(6, 4))
plt.plot(xispan,f)
plt.plot(xispanr,f1)
plt.plot([-0.5, 0.5], [0, 0], 'k--')
plt.xlabel('extent')
plt.ylabel('objective function')
plt.ylim(-1, 0.5)
plt.xlim(-0.5, 0.5)
plt.tight_layout()
org.figure(plt.savefig('function vs extent.png'),caption = 'function vs extent')


def extent(xi_eq):
    nu = np.array([-2, 1, 3])
    C0 = np.array([Ca0, Cb0, Cc0]) # initial concentrations
    C = C0 + nu * xi_eq
    f = Kc - np.prod(C**nu)
    return f

xi_eqf, = fsolve(extent, 0.03)
print('Equilibrium extent = {0:1.4f}'.format(xi_eqf))

print('C_NH3 = {0:1.4f} mol / L'.format(Ca0 + nu[0]*xi_eqf))
print('C_N2 = {0:1.4f} mol / L'.format(Cb0 + nu[1]*xi_eqf))
print('C_H2 = {0:1.4f} mol / L'.format(Cc0 + nu[2]*xi_eqf))

#+END_SRC

#+RESULTS:
:RESULTS:
#+CAPTION: function vs extent
[[file:function vs extent.png]]
Equilibrium extent = 0.0382
C_NH3 = 0.0235 mol / L
C_N2 = 0.0382 mol / L
C_H2 = 0.1147 mol / L
:END:

